{
  "extends": ["airbnb-base"],
  "settings": {
    "import/extensions": [
      ".js",
      ".mjs",
      ".jsx",
      ".ts",
      ".d.ts",
      ".tsx",
      ".mts",
      ".d.mts",
      ".cts",
      ".d.cts"
    ]
  },
  "rules": {
    "import/extensions": ["error", "ignorePackages"],
    "import/prefer-default-export": "off",
    "max-classes-per-file": "off",
    "max-len": "off"
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx", "**/*.mts", "**/*.cts"],
      "extends": ["airbnb-base", "airbnb-typescript/base"],
      "parserOptions": {
        "project": "./packages/**/tsconfig.json"
      },
      "settings": {
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true
          },
          "node": false
        },
        "import/parsers": {
          "@typescript-eslint/parser": [
            ".ts",
            ".tsx",
            ".d.ts",
            ".mts",
            ".d.mts",
            ".cts",
            ".d.cts"
          ]
        },
        "import/extensions": [
          ".js",
          ".mjs",
          ".jsx",
          ".ts",
          ".d.ts",
          ".tsx",
          ".mts",
          ".d.mts",
          ".cts",
          ".d.cts"
        ]
      },
      "rules": {
        "import/prefer-default-export": "off",
        "max-classes-per-file": "off",
        "max-len": "off",
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ForInStatement",
            "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
          },
          {
            "selector": "LabeledStatement",
            "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
          },
          {
            "selector": "WithStatement",
            "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
          }
        ]
      }
    }
  ]
}
